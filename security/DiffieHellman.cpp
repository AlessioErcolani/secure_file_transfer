#include "DiffieHellman.h"

DiffieHellman::
DiffieHellman()
{
    dh = NULL;
    P = NULL;
    G = NULL;
    int success = 0;

    //init dh, P, G
    get_dh2048();

    //generate private and public keys
    if (dh)
        success = DH_generate_key(dh);

    //check for errors
    if (!success)
        reset_dh();

    public_key = new byte[get_key_length()];

    const BIGNUM* PUBLIC_KEY;
    DH_get0_key(dh, &PUBLIC_KEY, NULL);

    BN_bn2bin(PUBLIC_KEY, public_key);

}

DiffieHellman::
~DiffieHellman()
{
    reset_dh();
}

void
DiffieHellman::
get_dh2048()
{
    unsigned char p[] = {
        0x80, 0xDE, 0x90, 0x1E, 0xEA, 0xFC, 0xED, 0xC7, 0xAB, 0xA9, 
        0x56, 0xD7, 0xB6, 0x8A, 0x86, 0xCD, 0xAE, 0x22, 0x58, 0x0A, 
        0x92, 0xFC, 0x0E, 0x2B, 0x98, 0x99, 0x5A, 0x69, 0x24, 0x6A, 
        0x9E, 0x1C, 0x30, 0x92, 0x68, 0x99, 0x8A, 0xCE, 0x4F, 0xBA, 
        0x62, 0xEF, 0x4F, 0x3F, 0x2E, 0xAE, 0xD4, 0x07, 0xC1, 0xDF, 
        0x89, 0x16, 0xA3, 0x49, 0x31, 0x7B, 0xCA, 0xEC, 0xE2, 0xEB, 
        0x27, 0xFE, 0x2A, 0xC8, 0xF8, 0x29, 0xAE, 0x25, 0xCF, 0xD1, 
        0x51, 0x36, 0x25, 0x21, 0x50, 0xC7, 0x25, 0xBF, 0xDC, 0xCB, 
        0xCB, 0xC3, 0x77, 0x48, 0x3F, 0x43, 0x75, 0xBD, 0xE8, 0x78, 
        0xE4, 0xA5, 0xD4, 0xCD, 0x6E, 0xEE, 0xDC, 0x94, 0x4E, 0xC5, 
        0xF0, 0x06, 0xA5, 0x76, 0x59, 0x17, 0x8C, 0x07, 0x44, 0xAB, 
        0xE8, 0x0E, 0x69, 0x0C, 0x6F, 0x10, 0x27, 0xFD, 0x35, 0x84, 
        0x2A, 0x0C, 0x50, 0xE2, 0xEE, 0x95, 0x20, 0xFD, 0x6B, 0xC7, 
        0xFE, 0x92, 0xB0, 0x83, 0x9B, 0x39, 0xD7, 0x77, 0xCA, 0xF7, 
        0x21, 0xF7, 0x03, 0xA9, 0x27, 0x00, 0xE7, 0x82, 0xCA, 0x9A, 
        0x44, 0xB3, 0x5B, 0x43, 0xEC, 0x70, 0xCE, 0xC3, 0x62, 0x4B, 
        0xB5, 0x47, 0x69, 0x1C, 0x20, 0xC9, 0x87, 0xF5, 0xF5, 0x93, 
        0x4A, 0xD1, 0x45, 0x5C, 0xCB, 0xB9, 0x4F, 0xFB, 0x40, 0xDC, 
        0xC4, 0xDD, 0xED, 0xB5, 0x29, 0x71, 0x53, 0x5A, 0xA4, 0x51, 
        0xBC, 0xE2, 0x7F, 0x27, 0xB2, 0xBA, 0x2C, 0xB7, 0xA4, 0x8F, 
        0xFC, 0x7D, 0x27, 0xA5, 0x5A, 0xDA, 0x5B, 0x23, 0xC0, 0x99, 
        0x0F, 0x11, 0x30, 0x1D, 0xF5, 0x06, 0xCC, 0x91, 0xED, 0x1E, 
        0xD6, 0xEB, 0xDD, 0xAC, 0xC9, 0x30, 0xBF, 0x45, 0xFB, 0x4D, 
        0x37, 0x97, 0xA6, 0x3B, 0x14, 0xBD, 0xD2, 0x91, 0x1F, 0x6D, 
        0x5B, 0x09, 0xB1, 0xAD, 0x26, 0xA6, 0x14, 0x1A, 0xEC, 0x08, 
        0x36, 0x46, 0xE0, 0x07, 0x65, 0x8B
    };
    unsigned char g[] = {
       0x02
    };

    dh = DH_new();

    if (dh == NULL)
        return;

    P = BN_bin2bn(p, sizeof(p), NULL);
    G = BN_bin2bn(g, sizeof(g), NULL);

    if (P == NULL || G == NULL || !DH_set0_pqg(dh, P, NULL, G))
        reset_dh();
}

size_t
DiffieHellman::
get_key_length()
{
    if (!dh)
        return 0;

    return (size_t) DH_size(dh);
}

byte*
DiffieHellman::
get_public_key()
{
    if (!dh)
        return NULL;

    size_t key_len = get_key_length();
    byte* pub_key = new byte[key_len];
    memcpy(pub_key, public_key, key_len); 
    
    return pub_key;
}

byte*
DiffieHellman::
compute_shared_key(byte peer_public_key[])
{
    const BIGNUM* PUBLIC_KEY = BN_bin2bn(peer_public_key, get_key_length(), NULL);
    byte* shared_key = new byte[get_key_length()];

    int shared_key_length = DH_compute_key(shared_key, PUBLIC_KEY, dh);

    if (shared_key_length == -1)
    {
        delete[] shared_key;
        return NULL;
    }

    return shared_key;
}

void
DiffieHellman::
reset_dh()
{
    if (dh)
    {
        DH_free(dh);
        dh = NULL;
        return;

    }

    BN_free(P);
    BN_free(G);
    if (public_key)
        delete[] public_key;

    public_key = NULL;
    P = G = NULL;
}

/*
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAgN6QHur87cerqVbXtoqGza4iWAqS/A4rmJlaaSRqnhwwkmiZis5P
umLvTz8urtQHwd+JFqNJMXvK7OLrJ/4qyPgpriXP0VE2JSFQxyW/3MvLw3dIP0N1
veh45KXUzW7u3JROxfAGpXZZF4wHRKvoDmkMbxAn/TWEKgxQ4u6VIP1rx/6SsIOb
Odd3yvch9wOpJwDngsqaRLNbQ+xwzsNiS7VHaRwgyYf19ZNK0UVcy7lP+0DcxN3t
tSlxU1qkUbzifyeyuiy3pI/8fSelWtpbI8CZDxEwHfUGzJHtHtbr3azJML9F+003
l6Y7FL3SkR9tWwmxrSamFBrsCDZG4AdliwIBAg==
-----END DH PARAMETERS-----
*/
